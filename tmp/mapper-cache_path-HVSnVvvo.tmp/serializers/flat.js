{"blocks":[{"tags":{"title":{"type":"title","string":"FlatSerializer","html":"<p>FlatSerializer</p>"}},"description":{"full":"<p>Renders the payload as a flat JSON object or array at the top level. Related\nrecords are embedded.</p>","summary":"<p>Renders the payload as a flat JSON object or array at the top level. Related\nrecords are embedded.</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":6,"codeStart":13,"code":"export default Serializer.extend({","ctx":false},{"tags":{"method":{"type":"method","string":"render","html":"<p>render</p>"},"param":[{"type":"param","string":"{Object|Array} payload  a record, array of records, or error","name":"payload","description":"<p>a record, array of records, or error</p>","types":["Object","Array"],"typesDescription":"<code>Object</code>|<code>Array</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{Object} options","name":"options","description":"","types":["Object"],"typesDescription":"<code>Object</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"html":"<p>{Object} options</p>"}],"return":{"type":"return","string":"{Object|Array}         the rendered payload","types":["Object","Array"],"typesDescription":"<code>Object</code>|<code>Array</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"<p>the rendered payload</p>"}},"description":{"full":"<p>Renders the payload, either a primary data payload or an error payload.</p>","summary":"<p>Renders the payload, either a primary data payload or an error payload.</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":15,"codeStart":25,"code":"render(payload, options) {\n  if (payload instanceof Error) {\n    return this.renderError(payload);\n  } else {\n    return this.renderPrimary(payload, options);\n  }\n},","ctx":{"type":"method","name":"render","string":"render()"}},{"tags":{"method":{"type":"method","string":"renderPrimary","html":"<p>renderPrimary</p>"},"param":[{"type":"param","string":"{Object|Array}  payload  record or array of records","name":"payload","description":"<p>record or array of records</p>","types":["Object","Array"],"typesDescription":"<code>Object</code>|<code>Array</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{Object}  options","name":"options","description":"","types":["Object"],"typesDescription":"<code>Object</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"html":"<p>{Object}  options</p>"}],"return":{"type":"return","string":"{Object|Array}              the rendered primary data","types":["Object","Array"],"typesDescription":"<code>Object</code>|<code>Array</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"<p>the rendered primary data</p>"}},"description":{"full":"<p>Renders a primary data payload (a record or array of records).</p>","summary":"<p>Renders a primary data payload (a record or array of records).</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":33,"codeStart":43,"code":"renderPrimary(payload, options) {\n  if (isArray(payload)) {\n    return payload.map((record) => {\n      this.renderRecord(record, options);\n    });\n  } else {\n    return this.renderRecord(payload, options);\n  }\n},","ctx":{"type":"method","name":"renderPrimary","string":"renderPrimary()"}},{"tags":{"method":{"type":"method","string":"renderRecord","html":"<p>renderRecord</p>"},"param":[{"type":"param","string":"{Object}     record","name":"record","description":"","types":["Object"],"typesDescription":"<code>Object</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"html":"<p>{Object}     record</p>"},{"type":"param","string":"{Object}     options","name":"options","description":"","types":["Object"],"typesDescription":"<code>Object</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"html":"<p>{Object}     options</p>"}],"return":{"type":"return","string":"{Object}             the rendered record","types":["Object"],"typesDescription":"<code>Object</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"<p>the rendered record</p>"}},"description":{"full":"<p>Renders an individual record</p>","summary":"<p>Renders an individual record</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":53,"codeStart":63,"code":"renderRecord(record, options) {\n  let id = this.adapter.idForRecord(record, options);\n  let attributes = this.serializeAttributes(record, options);\n  let relationships = this.serializeRelationships(record, options);\n  relationships = mapValues(relationships, (relationship) => {\n    return relationship.data;\n  });\n  return assign({ id }, attributes, relationships);\n},","ctx":{"type":"method","name":"renderRecord","string":"renderRecord()"}},{"tags":{"method":{"type":"method","string":"serializeRelationshipValue","html":"<p>serializeRelationshipValue</p>"},"param":[{"type":"param","string":"{Object|Array}  data  The related record(s)","name":"data","description":"<p>The related record(s)</p>","types":["Object","Array"],"typesDescription":"<code>Object</code>|<code>Array</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{String}  name  The name of the relationship","name":"name","description":"<p>The name of the relationship</p>","types":["String"],"typesDescription":"<code>String</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{Object}  record  The parent record","name":"record","description":"<p>The parent record</p>","types":["Object"],"typesDescription":"<code>Object</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{Object}  config  The serializer config for this relationship","name":"config","description":"<p>The serializer config for this relationship</p>","types":["Object"],"typesDescription":"<code>Object</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{Object}  options","name":"options","description":"","types":["Object"],"typesDescription":"<code>Object</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"html":"<p>{Object}  options</p>"}],"return":{"type":"return","string":"{Object|Array}                     the serialized relationship","types":["Object","Array"],"typesDescription":"<code>Object</code>|<code>Array</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"<p>the serialized relationship</p>"}},"description":{"full":"<p>Looks up the related record&#39;s serializer and serializes it.</p>","summary":"<p>Looks up the related record&#39;s serializer and serializes it.</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":73,"codeStart":86,"code":"serializeRelationshipValue(data, name, record, config, options) {\n  options = options.relationships[name];\n  if (config.strategy === 'record') {\n    let relatedSerializer = this.serializerFor(data, options);\n    return relatedSerializer.renderRecord(data, options);\n  } else if (config.strategy === 'records') {\n    let relatedSerializer = this.serializerFor(data[0], options);\n    return data.map((relatedRecord) => {\n      return relatedSerializer.renderRecord(relatedRecord, options);\n    });\n  } else {\n    return data;\n  }\n},","ctx":{"type":"method","name":"serializeRelationshipValue","string":"serializeRelationshipValue()"}},{"tags":{"method":{"type":"method","string":"renderError","html":"<p>renderError</p>"},"param":[{"type":"param","string":"{Error}    error","name":"error","description":"","types":["Error"],"typesDescription":"<code>Error</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"html":"<p>{Error}    error</p>"}],"return":{"type":"return","string":"{Object}          the rendered error payload","types":["Object"],"typesDescription":"<code>Object</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"<p>the rendered error payload</p>"}},"description":{"full":"<p>Render an error payload</p>","summary":"<p>Render an error payload</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":101,"codeStart":110,"code":"renderError(error) {\n  return {\n    status: error.status || 500,\n    code: error.code || 'InternalServerError',\n    message: error.message\n  };\n}\n\n});","ctx":{"type":"method","name":"renderError","string":"renderError()"}}],"url":"lib/serializers/flat.js","path":"lib/serializers/flat.js","name":"FlatSerializer"}