{"blocks":[{"tags":{"example":{"type":"example","string":"<p>import blackburn, { RawAdapter } from &#39;blackburn&#39;;</p><p>app.use(blackburn({ adapter: RawAdapter }))\napp.get(&#39;/posts&#39;, function(req, res, next) {\n  res.render(Post.find());\n});</p>","html":"<p>import blackburn, { RawAdapter } from &#39;blackburn&#39;;</p><p>app.use(blackburn({ adapter: RawAdapter }))\napp.get(&#39;/posts&#39;, function(req, res, next) {\n  res.render(Post.find());\n});</p>"},"method":{"type":"method","string":"blackburn","html":"<p>blackburn</p>"},"param":[{"type":"param","string":"{Object}  options","name":"options","description":"","types":["Object"],"typesDescription":"<code>Object</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"html":"<p>{Object}  options</p>"},{"type":"param","string":"{String|Object}  options.adapter - the adapter to use to interrogate\nmodel instances","name":"options.adapter","description":"<ul>\n<li>the adapter to use to interrogate model instances</li>\n</ul>\n","types":["String","Object"],"typesDescription":"<code>String</code>|<code>Object</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"isNested":true},{"type":"param","string":"{String|Object}   options.serializers - either the path to the\ndirectory of serializers, or an object whose keys are model types, and\nwhose values are instances of their respective Serializers. Defaults to\n'serializers'. The \"application\" serializer will be used when no type\nspecific serializer is found.","name":"options.serializers","description":"<ul>\n<li>either the path to the directory of serializers, or an object whose keys are model types, and\nwhose values are instances of their respective Serializers. Defaults to\n&#39;serializers&#39;. The &quot;application&quot; serializer will be used when no type\nspecific serializer is found.</li>\n</ul>\n","types":["String","Object"],"typesDescription":"<code>String</code>|<code>Object</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"isNested":true},{"type":"param","string":"{String}          options.renderMethodName - the name of the render\nmethod to attach to the response object. Defaults to 'render', which will\noverride the Express default render method.","name":"options.renderMethodName","description":"<ul>\n<li>the name of the render method to attach to the response object. Defaults to &#39;render&#39;, which will\noverride the Express default render method.</li>\n</ul>\n","types":["String"],"typesDescription":"<code>String</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"isNested":true}],"return":{"type":"return","string":"{Function}        blackburn middleware function","types":["Function"],"typesDescription":"<code>Function</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"<p>blackburn middleware function</p>"}},"description":{"full":"<p>Create a blackburn middleware function that will override res.render to use\nthe blackburn serializers and renderers. The res.render method takes to\narguments:</p><ul>\n<li><code>payload</code> - either a record, an array of records, or an Error object. Can\nalso be a Promise which resolves to any of those.</li>\n<li><code>options</code> - any options to pass to the serializer or adapter. Blackburn\ndoesn&#39;t use any of these options out of the box, but this allows you to\npass additional information into any custom adapters or serializers.</li>\n</ul>\n<p><code>res.render()</code> will return a promise which resolves once the response has\nbeen rendered.</p>","summary":"<p>Create a blackburn middleware function that will override res.render to use\nthe blackburn serializers and renderers. The res.render method takes to\narguments:</p>","body":"<ul>\n<li><code>payload</code> - either a record, an array of records, or an Error object. Can\nalso be a Promise which resolves to any of those.</li>\n<li><code>options</code> - any options to pass to the serializer or adapter. Blackburn\ndoesn&#39;t use any of these options out of the box, but this allows you to\npass additional information into any custom adapters or serializers.</li>\n</ul>\n<p><code>res.render()</code> will return a promise which resolves once the response has\nbeen rendered.</p>"},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":23,"codeStart":62,"code":"export default function blackburn(options = {}) {\n  let adapter = options.adapter || new RawAdapter();\n\n  // Load serializers\n  let serializers;\n  options.serializers = options.serializers || './serializers';\n  if (typeof options.serializers === 'string') {\n    serializers = requireAll(path.join(process.cwd(), options.serializers));\n  } else {\n    serializers = options.serializers;\n  }\n  // Ensure they are instantiated\n  serializers = mapValues(serializers, (Serializer, name) => {\n    return typeof Serializer !== 'function' ? Serializer : new Serializer({\n      serializers,\n      adapter: options.adapter,\n      type: name\n    });\n  });\n\n  let renderMethodName = options.renderMethodName || 'render';\n\n  return function blackburnMiddleware(req, res, next) {\n    res[renderMethodName] = function render(status, payloadPromise, opts = {}) {\n      // Ensure the status is set\n      if (typeof status !== 'number') {\n        opts = payloadPromise;\n        payloadPromise = status;\n        status = 200;\n      }\n      res.status(status);\n\n      return Promise.resolve(payloadPromise).then((payload) => {\n        let serializer;\n        // Serializer name is supplied\n        if (typeof opts.serializer === 'string') {\n          serializer = serializers[opts.serializer];\n        // Serializer instance is supplied\n        } else if (opts.serializer) {\n          serializer = opts.serializer;\n        // No serializer supplied - check the payload to try inferring\n        } else {\n          let sample = isArray(payload) ? payload[0] : payload;\n          if (sample) {\n            let type = adapter.typeForRecord(sample);\n            serializer = serializers[type] || serializers.application;\n          } else {\n            serializer = serializers.application;\n          }\n        }\n        assert(serializer, `Unable to serialize response! You didn't supply a serializer, no serializer found matched the payload's type, and you didn't supply an application serializer as a fallback.`);\n        res.json(serializer.render(payload, opts));\n      });\n    };\n    next();\n  };\n}","ctx":{"type":"function","name":"blackburn","string":"blackburn()"}}],"url":"lib/index.js","path":"lib/index.js","name":"blackburn"}